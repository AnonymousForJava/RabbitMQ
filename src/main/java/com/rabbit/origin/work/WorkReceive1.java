package com.rabbit.origin.work;

import com.rabbit.origin.utils.ConnectionUtil;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.QueueingConsumer;

/**
 * @ClassName WorkReceive1
 * @Author ZhangY
 * @Date 2020/02/21 13:06
 * @Version 1.0.0
 * @Description 消费者1
 */
public class WorkReceive1 {
    protected final static String QUEUE_NAME = "test_queue_work";

    public static void main(String[] argv) throws Exception {

        // 获取到连接以及mq通道
        Connection connection = ConnectionUtil.getConnection();
        Channel channel = connection.createChannel();

        // 声明队列
        channel.queueDeclare(QUEUE_NAME, false, false, false, null);

        // 同一时刻服务器只会发一条消息给消费者
        channel.basicQos(1);  //TODO Work模式的“能者多劳”打开此代码 ②

        // 定义队列的消费者
        QueueingConsumer consumer = new QueueingConsumer(channel);
        // 监听队列，false表示手动返回完成状态，true表示自动
        //参数说明
        // * @param queue the name of the queue
        // * @param autoAck true if the server should consider messages     TODO Work模式的“能者多劳”改为false(手动确认)
        // * acknowledged once delivered; false if the server should expect
        // * explicit acknowledgements
        // * @param callback an interface to the consumer object
        // * @return the consumerTag generated by the server
        channel.basicConsume(QUEUE_NAME, false, consumer);

        // 获取消息
        while (true) {
            QueueingConsumer.Delivery delivery = consumer.nextDelivery();
            String message = new String(delivery.getBody());
            System.out.println(" [y] Received '" + message + "'");
            //休眠
            Thread.sleep(10);
            // 返回确认状态，注释掉表示使用自动确认模式
            //channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);
        }
    }
}
